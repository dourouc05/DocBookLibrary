default namespace = "http://docbook.org/ns/docbook"
include "docbook.rnc" {
  db.classsynopsis =
    element classsynopsis {
      db.classsynopsis.attlist,
      db.template*, # As in C++. 
      (db.oo.inlines | db.classname)+, # Just db.classname to be consistent, but that would not be compatible with existing DocBook 5. 
      db.template*, # As in Java, Julia.
      (db.classsynopsisinfo # Existing tag
       | db.synopsisinfo # New tag, intending to replace the previous one
       | db.methodsynopsis
       | db.constructorsynopsis
       | db.destructorsynopsis
       | db.fieldsynopsis
       | db.synopsis)*, 
      db.recursive.blocks.or.sections?
    }
    
  db.methodparam =
    element methodparam {
      db.methodparam.attlist,
      db.modifier*,
      (db.type | db.templateid)?,
      ((db.modifier*, db.parameter, db.initializer?) | db.funcparams),
      db.modifier*, 
      db.para* # Just paragraphs: a parameter should not need much more (unlike the method itself). 
    }
    
  db.methodsynopsis =
    element methodsynopsis {
      db.methodsynopsis.attlist,
      db.template*, # As in C++. 
      db.modifier*,
      (db.type | db.templateid | db.void)?,
      db.methodname,
      db.template*, # As in Java.
      ((db.methodparam | db.group.methodparam)+ | db.void),
      db.exceptionname*,
      db.modifier*, 
      db.template*, # As in Julia.
      db.synopsisinfo*,
      db.recursive.blocks.or.sections?
    }
    
  # Add template IDs where they might fit.
  db.funcdef =
    element funcdef {
      db.funcdef.attlist, (db._text | db.type | db.templateid | db.function)*
    }
    
  db.paramdef =
    element paramdef {
      db.paramdef.attlist,
      (db._text
       | db.initializer
       | db.type
       | db.templateid
       | db.parameter
       | db.funcparams)*
    }
    
  db.fieldsynopsis =
    element fieldsynopsis {
      db.fieldsynopsis.attlist,
      db.modifier*,
      (db.type | db.templateid)?,
      db.varname,
      db.initializer?
    }
    
  db.type =
    element type { 
      db.type.attlist, 
      (db._text | db.templateid | db.programming.inlines)* 
    }
}
db.synopsis.blocks |= db.enumsynopsis | db.typedefsynopsis

db.programmingsynopsis = db.namespacesynopsis | db.macrosynopsis | db.typedefsynopsis | db.enumsynopsis
start |= db.programmingsynopsis
db.toplevel.sections |= db.programmingsynopsis

# Generic synopsisinfo. 
db.synopsisinfo.role.attribute = attribute role { text }
db.synopsisinfo.attlist =
  db.synopsisinfo.role.attribute?
  & db.common.attributes
  & db.common.linking.attributes
  & db.verbatim.attributes
db.synopsisinfo =
  element synopsisinfo {
    db.synopsisinfo.attlist, 
    (db.verbatim.contentmodel | (db.programming.inlines?, db.para*)) # Either a bit of text (just a file to include) or more involved content model (may include a first tag to bring more information, like the exact exception name plus the context where the exception is thrown/raised). 
  }
  
# Deal with generics.
div {
    ## First the inline elements. 
    db.programming.inlines |= db.templateid

    db.templateid.role.attribute = attribute role { text }
    db.templateid.attlist =
       db.templateid.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.templateid = element templateid { db.templateid.attlist, db._text }

    ## Then the actual template definitions.
    db.template = element template {
      (db.modifier | db.type | db._text)*,
      db.templateid,
      (db.modifier | db.type | db._text)*
    }
}

# Deal with namespaces. 
div {
    ## First the inline elements. 
    db.programming.inlines |= db.namespace | db.namespacename

    db.namespace.role.attribute = attribute role { text }
    db.namespace.attlist =
       db.namespace.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.namespace = element namespace { db.namespace.attlist, db.modifier*, db.namespacename, db.modifier* }

    db.namespacename.role.attribute = attribute role { text }
    db.namespacename.attlist =
       db.namespacename.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.namespacename = element namespacename { db.namespacename.attlist, db._text }
    
    ## Then the synopsis.
    db.synopsis.blocks |= db.namespacesynopsis
    
    db.namespacesynopsis.role.attribute = attribute role { text }
    db.namespacesynopsis.attlist =
      db.namespacesynopsis.role.attribute?
      & db.common.attributes
      & db.common.linking.attributes
      & db.language.attribute?
    db.namespacesynopsis = 
      element namespacesynopsis { 
        db.namespacesynopsis.attlist,
        (db.namespace | db.namespacename),
        db.recursive.blocks.or.sections?, 
        (db.synopsisinfo
        | db.classsynopsis
        | db.funcsynopsis
        | db.fieldsynopsis
        | db.typedefsynopsis
        | db.macrosynopsis
        | db.enumsynopsis
        | db.namespacesynopsis)*, 
        db.recursive.blocks.or.sections?
      }
}

# Deal with macros. Adapted from db.funcsynopsis.
div {
    ## First the inline elements. 
    db.programming.inlines |= db.macroname
        
    db.macroname.role.attribute = attribute role { text }
    db.macroname.attlist =
      db.macroname.role.attribute?
      & db.common.attributes
      & db.common.linking.attributes
    db.macroname =
      element macroname { db.function.attlist, db._text }
    
    ## Then the synopsis.
    db.synopsis.blocks |= db.macrosynopsis
    
    db.macrosynopsis.role.attribute = attribute role { text }
    db.macrosynopsis.attlist =
      db.macrosynopsis.role.attribute?
      & db.common.attributes
      & db.common.linking.attributes
      & db.language.attribute?
    db.macrosynopsis =
      element macrosynopsis {
        db.macrosynopsis.attlist,
        db.macroname,
        db.synopsisinfo*,
        db.macroprototype+,
        db.synopsisinfo*, 
        db.recursive.blocks.or.sections?
      }
     
    db.macroprototype.role.attribute = attribute role { text }
    db.macroprototype.attlist =
      db.macroprototype.role.attribute?
      & db.common.attributes
      & db.common.linking.attributes
    db.macroprototype =
      element macroprototype {
        db.macroprototype.attlist,
        db.modifier*,
        db.macrodef,
        (db.void
         | db.varargs
         | ((db.paramdef | db.group.paramdef)+, db.varargs?)),
        db.modifier*
      }
      
      db.macrodef.role.attribute = attribute role { text }
      db.macrodef.attlist =
        db.macrodef.role.attribute?
        & db.common.attributes
        & db.common.linking.attributes
      db.macrodef =
        element macrodef {
          db.macrodef.attlist, (db.type | db.templateid)*, db.macroname
        }
}

# Deal with unions. 
div {
    ## First the inline elements. 
    db.programming.inlines |= db.unionname

    db.unionname.role.attribute = attribute role { text }
    db.unionname.attlist =
       db.unionname.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.unionname = element unionname { db.unionname.attlist, db._text }
    
    ## Then the synopsis.
    db.union.role.attribute = attribute role { text }
    db.union.attlist =
       db.union.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.union = element union { db.union.attlist, db.unionname?, db.programming.inlines* }
    
    db.synopsis.blocks |= db.unionsynopsis
    
    db.unionsynopsis.attlist = 
       db.common.attributes
       & db.common.linking.attributes
       & db.language.attribute?
       & db.enumitem.ordered.attribute?
    db.unionsynopsis = 
      element unionsynopsis {
        db.unionsynopsis.attlist, 
        db.unionname?,
        db.union?, 
        db.synopsisinfo*,
        db.recursive.blocks.or.sections?
      }
}
    
# Deal with enums. 
div {
    ## First the inline elements. 
    db.programming.inlines |= db.enumname | db.enumvalue | db.enumidentifier

    db.enumname.role.attribute = attribute role { text }
    db.enumname.attlist =
       db.enumname.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.enumname = element enumname { db.enumname.attlist, db._text }
    
    db.enumvalue.role.attribute = attribute role { text }
    db.enumvalue.attlist =
       db.enumvalue.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.enumvalue = element enumvalue { db.enumvalue.attlist, db._text }
    
    db.enumitemdescription.role.attribute = attribute role { text }
    db.enumitemdescription.attlist =
       db.enumitemdescription.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.enumitemdescription = element enumitemdescription { db.enumitemdescription.attlist, db.all.inlines* }
    
    db.enumidentifier.role.attribute = attribute role { text }
    db.enumidentifier.attlist =
       db.enumidentifier.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.enumidentifier = element enumidentifier { db.enumidentifier.attlist, db._text }

    ## Then the synopsis.
    db.synopsis.blocks |= db.enumsynopsis
    
    db.enumitem.role.attribute = attribute role { text }
    db.enumitem.attlist =
       db.enumitem.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.enumitem = element enumitem { db.enumvalue.attlist, db.enumidentifier, db.enumvalue?, db.enumitemdescription? }
    
    db.enumitem.ordered.attribute = attribute ordered { text }
    db.enumsynopsis.attlist = 
       db.common.attributes
       & db.common.linking.attributes
       & db.language.attribute?
       & db.enumitem.ordered.attribute?
    db.enumsynopsis = 
      element enumsynopsis {
        db.enumsynopsis.attlist, 
        db.enumname?, 
        db.synopsisinfo*,
        db.enumitem+, 
        db.recursive.blocks.or.sections?
      }
}
  
# Deal with typedefs.
div {
    ## First the inline elements. 
    db.programming.inlines |= db.typedefname
    
    db.typedefname.role.attribute = attribute role { text }
    db.typedefname.attlist =
       db.typedefname.role.attribute?
       & db.common.attributes
       & db.common.linking.attributes
    db.typedefname = element typedefname { db.typedefname.attlist, db._text }
    
    ## Then the synopsis.
    db.synopsis.blocks |= db.typedefsynopsis
    
    db.typedefsynopsis.attlist = 
       db.common.attributes
       & db.common.linking.attributes
       & db.language.attribute?
    db.typedefsynopsis = 
      element typedefsynopsis {
        db.typedefsynopsis.attlist, 
        db.typedefname, 
        db.programming.inlines*, 
        db.recursive.blocks.or.sections?
      }
}